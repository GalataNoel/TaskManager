{"ast":null,"code":"const API_URL = 'http://localhost:5001/api/auth';\nconst register = async (username, password) => {\n  try {\n    const response = await fetch(`${API_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(await response.text());\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Registration failed:', error);\n    throw error;\n  }\n};\nconst login = async (username, password) => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(await response.text());\n    }\n    const data = await response.json();\n    if (data.token) {\n      localStorage.setItem('user', JSON.stringify(data));\n    }\n    return data;\n  } catch (error) {\n    console.error('Login failed:', error);\n    throw error;\n  }\n};\nconst logout = () => {\n  localStorage.removeItem('user');\n};\nconst authService = {\n  register,\n  login,\n  logout\n};\nexport default authService;","map":{"version":3,"names":["API_URL","register","username","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","text","json","error","console","login","data","token","localStorage","setItem","logout","removeItem","authService"],"sources":["/home/noel/WebstormProjects/TaskManager/client/src/services/authService.ts"],"sourcesContent":["const API_URL = 'http://localhost:5001/api/auth';\n\ninterface AuthResponse {\n    token?: string;\n    message?: string;\n    user?: any;\n}\n\nconst register = async (username: string, password: string): Promise<AuthResponse> => {\n    try {\n        const response = await fetch(`${API_URL}/register`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username,\n                password,\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error('Registration failed:', error);\n        throw error;\n    }\n};\n\nconst login = async (username: string, password: string): Promise<AuthResponse> => {\n    try {\n        const response = await fetch(`${API_URL}/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username,\n                password,\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n\n        const data = await response.json();\n\n        if (data.token) {\n            localStorage.setItem('user', JSON.stringify(data));\n        }\n\n        return data;\n    } catch (error) {\n        console.error('Login failed:', error);\n        throw error;\n    }\n};\n\nconst logout = () => {\n    localStorage.removeItem('user');\n};\n\nconst authService = {\n    register,\n    login,\n    logout,\n};\n\nexport default authService;"],"mappings":"AAAA,MAAMA,OAAO,GAAG,gCAAgC;AAQhD,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,QAAgB,KAA4B;EAClF,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,WAAW,EAAE;MAChDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBR,QAAQ;QACRC;MACJ,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC;IAC1C;IAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAME,KAAK,GAAG,MAAAA,CAAOf,QAAgB,EAAEC,QAAgB,KAA4B;EAC/E,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,QAAQ,EAAE;MAC7CM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBR,QAAQ;QACRC;MACJ,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC;IAC1C;IAEA,MAAMK,IAAI,GAAG,MAAMd,QAAQ,CAACU,IAAI,CAAC,CAAC;IAElC,IAAII,IAAI,CAACC,KAAK,EAAE;MACZC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACC,SAAS,CAACQ,IAAI,CAAC,CAAC;IACtD;IAEA,OAAOA,IAAI;EACf,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAMO,MAAM,GAAGA,CAAA,KAAM;EACjBF,YAAY,CAACG,UAAU,CAAC,MAAM,CAAC;AACnC,CAAC;AAED,MAAMC,WAAW,GAAG;EAChBvB,QAAQ;EACRgB,KAAK;EACLK;AACJ,CAAC;AAED,eAAeE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}