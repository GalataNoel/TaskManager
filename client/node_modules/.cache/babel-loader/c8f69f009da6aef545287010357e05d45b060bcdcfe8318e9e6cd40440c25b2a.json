{"ast":null,"code":"import { logout } from \"../features/authSlice\";\nconst API_URL = 'http://localhost:5001/api/auth';\nconst authService = {\n  register,\n  login,\n  logout\n};\nasync function register(username, password) {\n  // Function implementation\n  try {\n    const response = await fetch(`${API_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(await response.text());\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Registration failed:', error);\n    throw error;\n  }\n}\n;\nasync function login(username, password) {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(await response.text());\n    }\n    const data = await response.json();\n    if (!data.token || !data.user || !data.user.id || !data.user.username) {\n      throw new Error('Invalid response from server');\n    }\n    if (data.token) {\n      localStorage.setItem('user', JSON.stringify(data));\n    }\n    return data;\n  } catch (error) {\n    console.error('Login failed:', error);\n    throw error;\n  }\n}\n;\nexport default authService;","map":{"version":3,"names":["logout","API_URL","authService","register","login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","text","json","error","console","data","token","user","id","localStorage","setItem"],"sources":["/home/noel/WebstormProjects/TaskManager/client/src/services/authService.ts"],"sourcesContent":["import {logout} from \"../features/authSlice\";\n\nconst API_URL = 'http://localhost:5001/api/auth';\n\ninterface AuthResponse {\n    token: string;\n    user: {\n        id: string;\n        username: string;\n    };\n    message?: string;\n}\n\nconst authService = {\n    register,\n    login,\n    logout,\n};\n\nasync function register(username: string, password: string): Promise<AuthResponse> {\n    // Function implementation\n    try {\n        const response = await fetch(`${API_URL}/register`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username,\n                password,\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error('Registration failed:', error);\n        throw error;\n    }\n};\n\n\nasync function login(username: string, password: string): Promise<AuthResponse> {\n    try {\n        const response = await fetch(`${API_URL}/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username,\n                password,\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n\n        const data = await response.json();\n\n        if (!data.token || !data.user || !data.user.id || !data.user.username) {\n            throw new Error('Invalid response from server');\n        }\n\n        if (data.token) {\n            localStorage.setItem('user', JSON.stringify(data));\n        }\n\n        return data;\n    } catch (error) {\n        console.error('Login failed:', error);\n        throw error;\n    }\n};\n\nexport default authService;"],"mappings":"AAAA,SAAQA,MAAM,QAAO,uBAAuB;AAE5C,MAAMC,OAAO,GAAG,gCAAgC;AAWhD,MAAMC,WAAW,GAAG;EAChBC,QAAQ;EACRC,KAAK;EACLJ;AACJ,CAAC;AAED,eAAeG,QAAQA,CAACE,QAAgB,EAAEC,QAAgB,EAAyB;EAC/E;EACA,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,WAAW,EAAE;MAChDQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBR,QAAQ;QACRC;MACJ,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC;IAC1C;IAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ;AAAC;AAGD,eAAed,KAAKA,CAACC,QAAgB,EAAEC,QAAgB,EAAyB;EAC5E,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,QAAQ,EAAE;MAC7CQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBR,QAAQ;QACRC;MACJ,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC;IAC1C;IAEA,MAAMI,IAAI,GAAG,MAAMb,QAAQ,CAACU,IAAI,CAAC,CAAC;IAElC,IAAI,CAACG,IAAI,CAACC,KAAK,IAAI,CAACD,IAAI,CAACE,IAAI,IAAI,CAACF,IAAI,CAACE,IAAI,CAACC,EAAE,IAAI,CAACH,IAAI,CAACE,IAAI,CAACjB,QAAQ,EAAE;MACnE,MAAM,IAAIU,KAAK,CAAC,8BAA8B,CAAC;IACnD;IAEA,IAAIK,IAAI,CAACC,KAAK,EAAE;MACZG,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEb,IAAI,CAACC,SAAS,CAACO,IAAI,CAAC,CAAC;IACtD;IAEA,OAAOA,IAAI;EACf,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAMA,KAAK;EACf;AACJ;AAAC;AAED,eAAehB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}