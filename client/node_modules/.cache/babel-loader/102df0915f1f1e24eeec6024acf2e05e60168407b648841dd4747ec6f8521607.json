{"ast":null,"code":"var _jsxFileName = \"/home/noel/WebstormProjects/TaskManager/client/src/pages/DashboardPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTasks, createTask, updateTaskOnServer, deleteTaskOnServer, toggleTaskOnServer } from '../features/taskSlice';\nimport { logout } from '../features/authSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Button, Box } from '@mui/material';\nimport AddTaskForm from '../components/AddTaskForm';\nimport TaskList from '../components/TaskList';\nimport EditTaskDialog from '../components/EditTaskDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardPage = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    tasks,\n    isLoading\n  } = useSelector(state => state.tasks);\n  const {\n    user\n  } = useSelector(state => state.auth);\n  const navigate = useNavigate();\n  const [editingTask, setEditingTask] = useState(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n  const handleLogout = () => {\n    dispatch(logout());\n    navigate('/login');\n  };\n  const handleAddTask = (title, description) => {\n    dispatch(createTask(title, description));\n  };\n  const handleEditTask = task => {\n    setEditingTask(task);\n    setIsEditDialogOpen(true);\n  };\n  const handleSaveTask = (id, title, description) => {\n    dispatch(updateTaskOnServer({\n      id,\n      title,\n      description\n    }));\n  };\n  const handleDeleteTask = id => {\n    dispatch(deleteTaskOnServer(id));\n  };\n  const handleToggleTask = id => {\n    dispatch(toggleTaskOnServer(id));\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      my: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: [\"Welcome, \", user === null || user === void 0 ? void 0 : user.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"error\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"Your Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddTaskForm, {\n      onAddTask: handleAddTask,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      onDeleteTask: handleDeleteTask,\n      onToggleTask: handleToggleTask,\n      onEditTask: handleEditTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), editingTask && /*#__PURE__*/_jsxDEV(EditTaskDialog, {\n      open: isEditDialogOpen,\n      task: editingTask,\n      onClose: () => setIsEditDialogOpen(false),\n      onSave: handleSaveTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(DashboardPage, \"V/gAs+U7G6knjyy4AG8fFKoiJhE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useNavigate];\n});\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchTasks","createTask","updateTaskOnServer","deleteTaskOnServer","toggleTaskOnServer","logout","useNavigate","Container","Typography","Button","Box","AddTaskForm","TaskList","EditTaskDialog","jsxDEV","_jsxDEV","DashboardPage","_s","dispatch","tasks","isLoading","state","user","auth","navigate","editingTask","setEditingTask","isEditDialogOpen","setIsEditDialogOpen","handleLogout","handleAddTask","title","description","handleEditTask","task","handleSaveTask","id","handleDeleteTask","handleToggleTask","maxWidth","children","my","display","justifyContent","alignItems","variant","username","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","gutterBottom","onAddTask","onDeleteTask","onToggleTask","onEditTask","open","onClose","onSave","_c","$RefreshReg$"],"sources":["/home/noel/WebstormProjects/TaskManager/client/src/pages/DashboardPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../store';\nimport { fetchTasks, createTask, updateTaskOnServer, deleteTaskOnServer, toggleTaskOnServer } from '../features/taskSlice';\nimport { logout } from '../features/authSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography, Button, Box } from '@mui/material';\nimport AddTaskForm from '../components/AddTaskForm';\nimport TaskList from '../components/TaskList';\nimport EditTaskDialog from '../components/EditTaskDialog';\n\nconst DashboardPage: React.FC = () => {\n    const dispatch = useDispatch<AppDispatch>();\n    const { tasks, isLoading } = useSelector((state: RootState) => state.tasks);\n    const { user } = useSelector((state: RootState) => state.auth);\n    const navigate = useNavigate();\n\n    const [editingTask, setEditingTask] = useState<{ id: string; title: string; description: string } | null>(null);\n    const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n\n    useEffect(() => {\n        dispatch(fetchTasks());\n    }, [dispatch]);\n\n    const handleLogout = () => {\n        dispatch(logout());\n        navigate('/login');\n    };\n\n    const handleAddTask = (title: string, description: string) => {\n        dispatch(createTask(title, description));\n    };\n\n    const handleEditTask = (task: Task) => {\n        setEditingTask(task);\n        setIsEditDialogOpen(true);\n    };\n\n    const handleSaveTask = (id: string, title: string, description: string) => {\n        dispatch(updateTaskOnServer({ id, title, description }));\n    };\n\n    const handleDeleteTask = (id: string) => {\n        dispatch(deleteTaskOnServer(id));\n    };\n\n    const handleToggleTask = (id: string) => {\n        dispatch(toggleTaskOnServer(id));\n    };\n\n    return (\n        <Container maxWidth=\"md\">\n            <Box my={4} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Typography variant=\"h4\">\n                    Welcome, {user?.username}\n                </Typography>\n                <Button variant=\"outlined\" color=\"error\" onClick={handleLogout}>\n                    Logout\n                </Button>\n            </Box>\n\n            <Typography variant=\"h5\" gutterBottom>\n                Your Tasks\n            </Typography>\n\n            <AddTaskForm onAddTask={handleAddTask} isLoading={isLoading} />\n\n            <TaskList\n                tasks={tasks}\n                onDeleteTask={handleDeleteTask}\n                onToggleTask={handleToggleTask}\n                onEditTask={handleEditTask}\n            />\n\n            {editingTask && (\n                <EditTaskDialog\n                    open={isEditDialogOpen}\n                    task={editingTask}\n                    onClose={() => setIsEditDialogOpen(false)}\n                    onSave={handleSaveTask}\n                />\n            )}\n        </Container>\n    );\n};\n\nexport default DashboardPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}