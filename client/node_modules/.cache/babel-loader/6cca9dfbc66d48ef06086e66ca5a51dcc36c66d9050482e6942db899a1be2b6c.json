{"ast":null,"code":"// src/features/taskSlice.ts\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport taskService from '../services/taskService';\nimport { enqueueSnackbar } from 'notistack';\nconst initialState = {\n  tasks: [],\n  isLoading: false,\n  error: null\n};\n\n// Async thunks\nexport const fetchTasks = createAsyncThunk('tasks/fetchAll', async (_, {\n  getState\n}) => {\n  const {\n    auth\n  } = getState();\n  return await taskService.getTasks(auth.token);\n});\nexport const createTask = createAsyncThunk('tasks/create', async (taskData, {\n  getState\n}) => {\n  const {\n    auth\n  } = getState();\n  return await taskService.createTask(taskData, auth.token);\n});\nexport const updateTaskOnServer = createAsyncThunk('tasks/update', async (task, {\n  getState\n}) => {\n  const {\n    auth\n  } = getState();\n  return await taskService.updateTask(task, auth.token);\n});\nexport const deleteTaskOnServer = createAsyncThunk('tasks/delete', async (id, {\n  getState\n}) => {\n  const {\n    auth\n  } = getState();\n  await taskService.deleteTask(id, auth.token);\n  return id;\n});\nexport const toggleTaskOnServer = createAsyncThunk('tasks/toggle', async (id, {\n  getState\n}) => {\n  const {\n    auth\n  } = getState();\n  await taskService.toggleTask(id, auth.token);\n  return id;\n});\nconst taskSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n    // Handle all pending states\n    .addMatcher(action => action.type.endsWith('/pending'), state => {\n      state.isLoading = true;\n      state.error = null;\n    })\n    // Handle all rejected states\n    .addMatcher(action => action.type.endsWith('/rejected'), (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message || 'Failed to complete task';\n      enqueueSnackbar(state.error, {\n        variant: 'error'\n      });\n    })\n    // Specific success cases\n    .addCase(fetchTasks.fulfilled, (state, action) => {\n      state.tasks = action.payload;\n      state.isLoading = false;\n    }).addCase(createTask.fulfilled, (state, action) => {\n      state.tasks.push(action.payload);\n      state.isLoading = false;\n      enqueueSnackbar('Task created', {\n        variant: 'success'\n      });\n    }).addCase(updateTaskOnServer.fulfilled, (state, action) => {\n      const index = state.tasks.findIndex(t => t.id === action.payload.id);\n      if (index !== -1) {\n        state.tasks[index] = action.payload;\n      }\n      state.isLoading = false;\n      enqueueSnackbar('Task updated', {\n        variant: 'success'\n      });\n    }).addCase(deleteTaskOnServer.fulfilled, (state, action) => {\n      state.tasks = state.tasks.filter(t => t.id !== action.payload);\n      state.isLoading = false;\n      enqueueSnackbar('Task deleted', {\n        variant: 'success'\n      });\n    }).addCase(toggleTaskOnServer.fulfilled, (state, action) => {\n      const task = state.tasks.find(t => t.id === action.payload);\n      if (task) {\n        task.completed = !task.completed;\n      }\n      state.isLoading = false;\n    });\n  }\n});\nexport const updateTask = createAsyncThunk;\nexport default taskSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","taskService","enqueueSnackbar","initialState","tasks","isLoading","error","fetchTasks","_","getState","auth","getTasks","token","createTask","taskData","updateTaskOnServer","task","updateTask","deleteTaskOnServer","id","deleteTask","toggleTaskOnServer","toggleTask","taskSlice","name","reducers","extraReducers","builder","addMatcher","action","type","endsWith","state","message","variant","addCase","fulfilled","payload","push","index","findIndex","t","filter","find","completed","reducer"],"sources":["/home/noel/WebstormProjects/TaskManager/client/src/features/taskSlice.ts"],"sourcesContent":["// src/features/taskSlice.ts\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { AppDispatch, RootState } from '@store/store';\nimport taskService from '../services/taskService';\nimport { enqueueSnackbar } from 'notistack';\n\n\ninterface Task {\n    id: string;\n    title: string;\n    description: string;\n    completed: boolean;\n    userId: string;\n}\n\ninterface TaskState {\n    tasks: Task[];\n    isLoading: boolean;\n    error: string | null;\n}\n\nconst initialState: TaskState = {\n    tasks: [],\n    isLoading: false,\n    error: null\n};\n\n// Async thunks\nexport const fetchTasks = createAsyncThunk(\n    'tasks/fetchAll',\n    async (_, { getState }) => {\n        const { auth } = getState() as RootState;\n        return await taskService.getTasks(auth.token!);\n    }\n);\n\nexport const createTask = createAsyncThunk(\n    'tasks/create',\n    async (taskData: Omit<Task, 'id'>, { getState }) => {\n        const { auth } = getState() as RootState;\n        return await taskService.createTask(taskData, auth.token!);\n    }\n);\n\nexport const updateTaskOnServer = createAsyncThunk(\n    'tasks/update',\n    async (task: Task, { getState }) => {\n        const { auth } = getState() as RootState;\n        return await taskService.updateTask(task, auth.token!);\n    }\n);\n\nexport const deleteTaskOnServer = createAsyncThunk(\n    'tasks/delete',\n    async (id: string, { getState }) => {\n        const { auth } = getState() as RootState;\n        await taskService.deleteTask(id, auth.token!);\n        return id;\n    }\n);\n\nexport const toggleTaskOnServer = createAsyncThunk(\n    'tasks/toggle',\n    async (id: string, { getState }) => {\n        const { auth } = getState() as RootState;\n        await taskService.toggleTask(id, auth.token!);\n        return id;\n    }\n);\n\nconst taskSlice = createSlice({\n    name: 'tasks',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            // Handle all pending states\n            .addMatcher(\n                (action) => action.type.endsWith('/pending'),\n                (state) => {\n                    state.isLoading = true;\n                    state.error = null;\n                }\n            )\n            // Handle all rejected states\n            .addMatcher(\n                (action) => action.type.endsWith('/rejected'),\n                (state, action) => {\n                    state.isLoading = false;\n                    state.error = action.error.message || 'Failed to complete task';\n                    enqueueSnackbar(state.error, { variant: 'error' });\n                }\n            )\n            // Specific success cases\n            .addCase(fetchTasks.fulfilled, (state, action) => {\n                state.tasks = action.payload;\n                state.isLoading = false;\n            })\n            .addCase(createTask.fulfilled, (state, action) => {\n                state.tasks.push(action.payload);\n                state.isLoading = false;\n                enqueueSnackbar('Task created', { variant: 'success' });\n            })\n            .addCase(updateTaskOnServer.fulfilled, (state, action) => {\n                const index = state.tasks.findIndex(t => t.id === action.payload.id);\n                if (index !== -1) {\n                    state.tasks[index] = action.payload;\n                }\n                state.isLoading = false;\n                enqueueSnackbar('Task updated', { variant: 'success' });\n            })\n            .addCase(deleteTaskOnServer.fulfilled, (state, action) => {\n                state.tasks = state.tasks.filter(t => t.id !== action.payload);\n                state.isLoading = false;\n                enqueueSnackbar('Task deleted', { variant: 'success' });\n            })\n            .addCase(toggleTaskOnServer.fulfilled, (state, action) => {\n                const task = state.tasks.find(t => t.id === action.payload);\n                if (task) {\n                    task.completed = !task.completed;\n                }\n                state.isLoading = false;\n            });\n    }\n});\nexport const updateTask = createAsyncThunk\nexport default taskSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}