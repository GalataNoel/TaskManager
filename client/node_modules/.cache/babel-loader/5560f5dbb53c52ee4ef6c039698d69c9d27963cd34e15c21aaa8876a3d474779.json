{"ast":null,"code":"const API_URL = 'http://localhost:5001/api/auth';\nexport const register = async (username, password) => {\n  try {\n    const response = await fetch(`${API_URL}/register`, {\n      method: 'POST',\n      mode: 'cors',\n      // Explicitly enable CORS\n      credentials: 'include',\n      // Required for cookies\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) throw new Error(await response.text());\n    return await response.json();\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw new Error('Registration failed. Please try again.');\n  }\n};\nasync function login(username, password) {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(await response.text());\n    }\n    const data = await response.json();\n    if (!data.token || !data.user || !data.user.id || !data.user.username) {\n      throw new Error('Invalid response from server');\n    }\n    if (data.token) {\n      localStorage.setItem('user', JSON.stringify(data));\n    }\n    return data;\n  } catch (error) {\n    console.error('Login failed:', error);\n    throw error;\n  }\n}\nfunction logout() {\n  localStorage.removeItem('user');\n}\nconst authService = {\n  register,\n  login,\n  logout\n};\nexport default authService;","map":{"version":3,"names":["API_URL","register","username","password","response","fetch","method","mode","credentials","headers","body","JSON","stringify","ok","Error","text","json","error","console","login","data","token","user","id","localStorage","setItem","logout","removeItem","authService"],"sources":["/home/noel/WebstormProjects/TaskManager/client/src/services/authService.ts"],"sourcesContent":["const API_URL = 'http://localhost:5001/api/auth';\n\ninterface User {\n    id: string;\n    username: string;\n}\n\ninterface AuthResponse {\n    user: User;\n    token: string;\n}\n\nexport const register = async (username: string, password: string) => {\n    try {\n        const response = await fetch(`${API_URL}/register`, {\n            method: 'POST',\n            mode: 'cors', // Explicitly enable CORS\n            credentials: 'include', // Required for cookies\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password }),\n        });\n\n        if (!response.ok) throw new Error(await response.text());\n        return await response.json();\n    } catch (error) {\n        console.error('Registration error:', error);\n        throw new Error('Registration failed. Please try again.');\n    }\n};\n\nasync function login(username: string, password: string): Promise<AuthResponse> {\n    try {\n        const response = await fetch(`${API_URL}/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username,\n                password,\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n\n        const data = await response.json();\n\n        if (!data.token || !data.user || !data.user.id || !data.user.username) {\n            throw new Error('Invalid response from server');\n        }\n\n        if (data.token) {\n            localStorage.setItem('user', JSON.stringify(data));\n        }\n\n        return data;\n    } catch (error) {\n        console.error('Login failed:', error);\n        throw error;\n    }\n}\n\nfunction logout(): void {\n    localStorage.removeItem('user');\n}\n\nconst authService = {\n    register,\n    login,\n    logout,\n};\n\nexport default authService;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,gCAAgC;AAYhD,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,QAAgB,KAAK;EAClE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,WAAW,EAAE;MAChDM,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE,MAAM;MAAE;MACdC,WAAW,EAAE,SAAS;MAAE;MACxBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,QAAQ;QAAEC;MAAS,CAAC;IAC/C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACS,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAAC;IACxD,OAAO,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAM,IAAIH,KAAK,CAAC,wCAAwC,CAAC;EAC7D;AACJ,CAAC;AAED,eAAeK,KAAKA,CAACjB,QAAgB,EAAEC,QAAgB,EAAyB;EAC5E,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,QAAQ,EAAE;MAC7CM,MAAM,EAAE,MAAM;MACdG,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBV,QAAQ;QACRC;MACJ,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACS,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAAC;IAC1C;IAEA,MAAMK,IAAI,GAAG,MAAMhB,QAAQ,CAACY,IAAI,CAAC,CAAC;IAElC,IAAI,CAACI,IAAI,CAACC,KAAK,IAAI,CAACD,IAAI,CAACE,IAAI,IAAI,CAACF,IAAI,CAACE,IAAI,CAACC,EAAE,IAAI,CAACH,IAAI,CAACE,IAAI,CAACpB,QAAQ,EAAE;MACnE,MAAM,IAAIY,KAAK,CAAC,8BAA8B,CAAC;IACnD;IAEA,IAAIM,IAAI,CAACC,KAAK,EAAE;MACZG,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEd,IAAI,CAACC,SAAS,CAACQ,IAAI,CAAC,CAAC;IACtD;IAEA,OAAOA,IAAI;EACf,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAMA,KAAK;EACf;AACJ;AAEA,SAASS,MAAMA,CAAA,EAAS;EACpBF,YAAY,CAACG,UAAU,CAAC,MAAM,CAAC;AACnC;AAEA,MAAMC,WAAW,GAAG;EAChB3B,QAAQ;EACRkB,KAAK;EACLO;AACJ,CAAC;AAED,eAAeE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}